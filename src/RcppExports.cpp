// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// huber_weight
arma::vec huber_weight(const arma::vec& x, const double& cw);
RcppExport SEXP _MyFPLM_huber_weight(SEXP xSEXP, SEXP cwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type cw(cwSEXP);
    rcpp_result_gen = Rcpp::wrap(huber_weight(x, cw));
    return rcpp_result_gen;
END_RCPP
}
// huber_rho
arma::vec huber_rho(const arma::vec& x, const double& cw);
RcppExport SEXP _MyFPLM_huber_rho(SEXP xSEXP, SEXP cwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type cw(cwSEXP);
    rcpp_result_gen = Rcpp::wrap(huber_rho(x, cw));
    return rcpp_result_gen;
END_RCPP
}
// huber_estimates
List huber_estimates(const arma::mat& X, const arma::vec& y, arma::vec& beta, const double& cw, const double& tol);
RcppExport SEXP _MyFPLM_huber_estimates(SEXP XSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP cwSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type cw(cwSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(huber_estimates(X, y, beta, cw, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MyFPLM_huber_weight", (DL_FUNC) &_MyFPLM_huber_weight, 2},
    {"_MyFPLM_huber_rho", (DL_FUNC) &_MyFPLM_huber_rho, 2},
    {"_MyFPLM_huber_estimates", (DL_FUNC) &_MyFPLM_huber_estimates, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_MyFPLM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
